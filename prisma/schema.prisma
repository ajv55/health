// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  TDEE String?
  age String?
  weightInLbs String?
  heightInInches String?
  calories String?
  gender String?
  workoutPlan String? 

 // Define the relationship with CalorieIntakeRecord entity
  calorieIntakeRecords CalorieIntakeRecord[]
  account Account []
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId 
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int? 
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Define the schema for the CalorieIntakeRecord entity
model CalorieIntakeRecord {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier for the record
  userId        String  @db.ObjectId                  // Foreign key to associate record with a user
  user          User    @relation(fields: [userId], references: [id]) // Relationship with the User entity
  date          DateTime?   
  time          DateTime?  
  foodItem      String?
  mealType      String?      // Date of the calorie intake record
  totalCalories Int?                           // Total calories consumed on the specified date
  createdAt     DateTime? @default(now())      // Timestamp when the record was created
  updatedAt     DateTime? @updatedAt           // Timestamp when the record was last updated
  
  // Specify unique constraint to ensure only one record per user per date
  @@unique([userId, date])
}

model Quote {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quote String?
}

model Nutriton {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  nutritionGuide String?
}