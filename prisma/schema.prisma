// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") 
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  stripeCustomerId String?   @unique
  isActive         Boolean?   @default(false)
  subscriptionId String?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  TDEE String?
  agreed String?
  age String?
  recommend Int?
  weightInLbs String?
  heightInInches String?
  calories String?
  gender String?
  goal String?
  macronutrients   Macronutrient?  
  macronutrientId  String?        @db.ObjectId

 // Define the relationship with CalorieIntake entity
  calorieIntake CalorieIntake[]
  // Define the relationship with WaterInakeRecord entity
  waterIntakeRecords waterIntakeRecord[]
  // Define the relationship with exerciseChallenges entity
  exerciseChallenge exerciseChallenges[]
  //Define the relationship with CompletedChallenge entity
  CompletedChallenges   CompletedChallenges[]
  //Define the relationship with Workout entity
  workouts  Workout[]
  // Define the relationship with MealPlan entity
  mealPlans   MealPlan[] @relation("UserMealPlans")

  stepsLog  StepLog[]

   mealLogs  MealLog[]
   lunchLogs LunchLog[]
   dinnerLogs DinnerLog[]
   snackLogs SnackLog[]
  account Account []
}

model Macronutrient {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  proteinGrams   Float?
  carbGrams      Float?
  fatGrams       Float?
  satFatGrams    Float?
  transFatGrams  Float?
  sodiumMg       Float?
  calciumMg      Float?
  fiberGrams     Float?
  proteinPercent Float?
  carbPercent    Float?
  fatPercent     Float?
  userId         String  @db.ObjectId @unique
  user           User    @relation(fields: [userId], references: [id])
  
}

model MealPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation("UserMealPlans", fields: [userId], references: [id])
  meals       Json?    // Store meal details as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StepLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user  User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  steps Int
  createdAt  DateTime @default(now())
}

model MealLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String  @db.ObjectId
  name       String?
  calories   Float?
  fat        Float?
  carbs      Float?
  protein    Float?
  sodium     Float?
  transFat   Float?
  satFat     Float?
  calcium    Float?
  fiber      Float?
  createdAt  DateTime @default(now())
}

model LunchLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String  @db.ObjectId
  name       String?
  calories   Float?
  fat        Float?
  carbs      Float?
  protein    Float?
  sodium     Float?
  transFat   Float?
  satFat     Float?
  calcium    Float?
  fiber      Float?
  createdAt  DateTime @default(now())
}

model DinnerLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String  @db.ObjectId
  name       String?
  calories   Float?
  fat        Float?
  carbs      Float?
  protein    Float?
  sodium     Float?
  transFat   Float?
  satFat     Float?
  calcium    Float?
  fiber      Float?
  createdAt  DateTime @default(now())
}

model SnackLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String  @db.ObjectId
  name       String?
  calories   Float?
  fat        Float?
  carbs      Float?
  protein    Float?
  sodium     Float?
  transFat   Float?
  satFat     Float?
  calcium    Float?
  fiber      Float?
  createdAt  DateTime @default(now())
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId 
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int? 
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Define the schema for the CalorieIntakeRecord entity


model CalorieIntake {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier for the record
  userId        String  @db.ObjectId                  // Foreign key to associate record with a user
  user          User    @relation(fields: [userId], references: [id]) // Relationship with the User entity
  date          DateTime?   
  time          String?  
  foodItem      String?
  mealType      String?   
  totalCalories Int?                           // Total calories consumed on the specified date
  fruit         Json?
  meat          Json?
  carbs         Json?
  drink         Json?
  vegetable     Json?
  createdAt     DateTime? @default(now())      // Timestamp when the record was created
  updatedAt     DateTime? @updatedAt           // Timestamp when the record was last updated
  
  // Specify unique constraint to ensure only one record per user per date
   @@unique([userId, date])
}

// Define the schema for the waterIntakeRecord

model waterIntakeRecord {
  id String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier for the record
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id]) // Relationship with the User entity
  date DateTime? // Date of the water intake record
  amount Float? // Amount of water consumed in liters
  createdAt     DateTime @default(now())      // Timestamp when the record was created
  updatedAt     DateTime @updatedAt           // Timestamp when the record was last updated
  
  // Specify unique constraint to ensure only one record per user per date
  @@unique([userId, date])
}

model Quote {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quote String?
}

model Nutriton {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  nutritionGuide String?
}

model WorkoutGuide {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  workoutGuide String?
}

model exerciseChallenges { 
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  challenges String?
  completed Boolean?   
  createdAt     DateTime @default(now())      // Timestamp when the record was created
  updatedAt     DateTime @updatedAt    
}

model dailyChallenges {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  challenges String?
}

model CompletedChallenges {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId// Assuming userId is a string identifier for the user
  user      User    @relation(fields: [userId], references: [id])
  challenge String?   // Assuming challengeId is a string identifier for the daily challenge
  completedAt DateTime @default(now())
}

model Fruits {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  Fruits String?
}

model Meats {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  Meats String?
}

model Vegetables {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  Vegetables String?
}

model Carbs {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  Carbs  String?
 }

model CommonCarbs {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  carbs  String?
 }


 model BreakfastFoods {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  breakfast  String?
 }

 model LunchFoods {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  lunch String?
 }

 model DinnerFoods {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  dinner String?
 }

 model SnackFoods {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  snack String?
 }

 model HighFatFoods {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fatFoods String?
 }

 model ProteinHighFoods {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  proteinFoods String?
 }

 model CarbsHighFoods {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  carbsFood String?
 }

 model Drinks {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  Drinks  String?
 }

 model Workout {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user   User  @relation(fields: [userId], references: [id])
  muscle   String?
  exercise  String?
  weight    Int?
  reps     String?
  sets     String?
  date    DateTime?
  

  @@unique([userId, date])
 }

 model searchWorkout {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  workouts  Json?
 }